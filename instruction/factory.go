package instruction

import (
	"fmt"
	"jvm/instruction/base"
	"jvm/instruction/comparison"
	"jvm/instruction/constants"
	"jvm/instruction/control"
	"jvm/instruction/conversions"
	"jvm/instruction/extended"
	"jvm/instruction/loads"
	"jvm/instruction/math"
	"jvm/instruction/reference"
	"jvm/instruction/reserved"
	"jvm/instruction/stack"
	"jvm/instruction/stores"
)

func NewInstruction(opcode byte) base.Instruction {
	switch opcode {
	case 0x00:
		return &constants.NOP{}
	case 0x01:
		return &constants.ACONST_NULL{}
	case 0x02:
		return &constants.ICONST_M1{}
	case 0x03:
		return &constants.ICONST_0{}
	case 0x04:
		return &constants.ICONST_1{}
	case 0x05:
		return &constants.ICONST_2{}
	case 0x06:
		return &constants.ICONST_3{}
	case 0x07:
		return &constants.ICONST_4{}
	case 0x08:
		return &constants.ICONST_5{}
	case 0x09:
		return &constants.LCONST_0{}
	case 0x0a:
		return &constants.LCONST_1{}
	case 0x0b:
		return &constants.FCONST_0{}
	case 0x0c:
		return &constants.FCONST_1{}
	case 0x0d:
		return &constants.FCONST_2{}
	case 0x0e:
		return &constants.DCONST_0{}
	case 0x0f:
		return &constants.DCONST_1{}
	case 0x10:
		return &constants.BIPUSH{}
	case 0x11:
		return &constants.SIPUSH{}
	case 0x12:
		return &constants.LDC{}
	case 0x13:
		return &constants.LDCW{}
	case 0x14:
		return &constants.LDC2W{}
	case 0x15:
		return &loads.ILOAD{}
	case 0x16:
		return &loads.LLOAD{}
	case 0x17:
		return &loads.FLOAD{}
	case 0x18:
		return &loads.DLOAD{}
	case 0x19:
		return &loads.ALOAD{}
	case 0x1a:
		return &loads.ILOAD_0{}
	case 0x1b:
		return &loads.ILOAD_1{}
	case 0x1c:
		return &loads.ILOAD_2{}
	case 0x1d:
		return &loads.ILOAD_3{}
	case 0x1e:
		return &loads.LLOAD_0{}
	case 0x1f:
		return &loads.LLOAD_1{}
	case 0x20:
		return &loads.LLOAD_2{}
	case 0x21:
		return &loads.LLOAD_3{}
	case 0x22:
		return &loads.FLOAD_0{}
	case 0x23:
		return &loads.FLOAD_1{}
	case 0x24:
		return &loads.FLOAD_2{}
	case 0x25:
		return &loads.FLOAD_3{}
	case 0x26:
		return &loads.DLOAD_0{}
	case 0x27:
		return &loads.DLOAD_1{}
	case 0x28:
		return &loads.DLOAD_2{}
	case 0x29:
		return &loads.DLOAD_3{}
	case 0x2a:
		return &loads.ALOAD_0{}
	case 0x2b:
		return &loads.ALOAD_1{}
	case 0x2c:
		return &loads.ALOAD_2{}
	case 0x2d:
		return &loads.ALOAD_3{}
	case 0x2e:
		return &loads.IALOAD{}
	case 0x2f:
		return &loads.LALOAD{}
	case 0x30:
		return &loads.FALOAD{}
	case 0x31:
		return &loads.DALOAD{}
	case 0x32:
		return &loads.AALOAD{}
	case 0x33:
		return &loads.BALOAD{}
	case 0x34:
		return &loads.CALOAD{}
	case 0x35:
		return &loads.SALOAD{}
	case 0x36:
		return &stores.ISTORE{}
	case 0x37:
		return &stores.LSTORE{}
	case 0x38:
		return &stores.FSTORE{}
	case 0x39:
		return &stores.DSTORE{}
	case 0x3a:
		return &stores.ASTORE{}
	case 0x3b:
		return &stores.ISTORE_0{}
	case 0x3c:
		return &stores.ISTORE_1{}
	case 0x3d:
		return &stores.ISTORE_2{}
	case 0x3e:
		return &stores.ISTORE_3{}
	case 0x3f:
		return &stores.LSTORE_0{}
	case 0x40:
		return &stores.LSTORE_1{}
	case 0x41:
		return &stores.LSTORE_2{}
	case 0x42:
		return &stores.LSTORE_3{}
	case 0x43:
		return &stores.FSTORE_0{}
	case 0x44:
		return &stores.FSTORE_1{}
	case 0x45:
		return &stores.FSTORE_2{}
	case 0x46:
		return &stores.FSTORE_3{}
	case 0x47:
		return &stores.DSTORE_0{}
	case 0x48:
		return &stores.DSTORE_1{}
	case 0x49:
		return &stores.DSTORE_2{}
	case 0x4a:
		return &stores.DSTORE_3{}
	case 0x4b:
		return &stores.ASTORE_0{}
	case 0x4c:
		return &stores.ASTORE_1{}
	case 0x4d:
		return &stores.ASTORE_2{}
	case 0x4e:
		return &stores.ASTORE_3{}
	case 0x4f:
		return &stores.IASTORE{}
	case 0x50:
		return &stores.LASTORE{}
	case 0x51:
		return &stores.FASTORE{}
	case 0x52:
		return &stores.DASTORE{}
	case 0x53:
		return &stores.AASTORE{}
	case 0x54:
		return &stores.BASTORE{}
	case 0x55:
		return &stores.CASTORE{}
	case 0x56:
		return &stores.SASTORE{}
	case 0x57:
		return &stack.POP{}
	case 0x58:
		return &stack.POP2{}
	case 0x59:
		return &stack.DUP{}
	case 0x5a:
		return &stack.DUP_X1{}
	case 0x5b:
		return &stack.DUP_X2{}
	case 0x5c:
		return &stack.DUP2{}
	case 0x5d:
		return &stack.DUP2_X1{}
	case 0x5e:
		return &stack.DUP2_X2{}
	case 0x5f:
		return &stack.SWAP{}
	case 0x60:
		return &math.IADD{}
	case 0x61:
		return &math.LADD{}
	case 0x62:
		return &math.FADD{}
	case 0x63:
		return &math.DADD{}
	case 0x64:
		return &math.ISUB{}
	case 0x65:
		return &math.LSUB{}
	case 0x66:
		return &math.FSUB{}
	case 0x67:
		return &math.DSUB{}
	case 0x68:
		return &math.IMUL{}
	case 0x69:
		return &math.LMUL{}
	case 0x6a:
		return &math.FMUL{}
	case 0x6b:
		return &math.DMUL{}
	case 0x6c:
		return &math.IDIV{}
	case 0x6d:
		return &math.LDIV{}
	case 0x6e:
		return &math.FDIV{}
	case 0x6f:
		return &math.DDIV{}
	case 0x70:
		return &math.IREM{}
	case 0x71:
		return &math.LREM{}
	case 0x72:
		return &math.FREM{}
	case 0x73:
		return &math.DREM{}
	case 0x74:
		return &math.INEG{}
	case 0x75:
		return &math.LNEG{}
	case 0x76:
		return &math.FNEG{}
	case 0x77:
		return &math.DNEG{}
	case 0x78:
		return &math.ISHL{}
	case 0x79:
		return &math.LSHL{}
	case 0x7a:
		return &math.ISHR{}
	case 0x7b:
		return &math.LSHR{}
	case 0x7c:
		return &math.IUSHR{}
	case 0x7d:
		return &math.LUSHR{}
	case 0x7e:
		return &math.IAND{}
	case 0x7f:
		return &math.LAND{}
	case 0x80:
		return &math.IOR{}
	case 0x81:
		return &math.LOR{}
	case 0x82:
		return &math.IXOR{}
	case 0x83:
		return &math.LXOR{}
	case 0x84:
		return &math.IINC{}
	case 0x85:
		return &conversions.I2L{}
	case 0x86:
		return &conversions.I2F{}
	case 0x87:
		return &conversions.I2D{}
	case 0x88:
		return &conversions.L2I{}
	case 0x89:
		return &conversions.L2F{}
	case 0x8a:
		return &conversions.L2D{}
	case 0x8b:
		return &conversions.F2I{}
	case 0x8c:
		return &conversions.F2L{}
	case 0x8d:
		return &conversions.F2D{}
	case 0x8e:
		return &conversions.D2I{}
	case 0x8f:
		return &conversions.D2L{}
	case 0x90:
		return &conversions.D2F{}
	case 0x91:
		return &conversions.I2B{}
	case 0x92:
		return &conversions.I2C{}
	case 0x93:
		return &conversions.I2S{}
	case 0x94:
		return &comparison.LCMP{}
	case 0x95:
		return &comparison.FCMPL{}
	case 0x96:
		return &comparison.FCMPG{}
	case 0x97:
		return &comparison.DCMPL{}
	case 0x98:
		return &comparison.DCMPG{}
	case 0x99:
		return &comparison.IFEQ{}
	case 0x9a:
		return &comparison.IFNE{}
	case 0x9b:
		return &comparison.IFLT{}
	case 0x9c:
		return &comparison.IFGE{}
	case 0x9d:
		return &comparison.IFGT{}
	case 0x9e:
		return &comparison.IFLE{}
	case 0x9f:
		return &comparison.IF_ICMPEQ{}
	case 0xa0:
		return &comparison.IF_ICMPNE{}
	case 0xa1:
		return &comparison.IF_ICMPLT{}
	case 0xa2:
		return &comparison.IF_ICMPGE{}
	case 0xa3:
		return &comparison.IF_ICMPGT{}
	case 0xa4:
		return &comparison.IF_ICMPLE{}
	case 0xa5:
		return &comparison.IF_ACMPEQ{}
	case 0xa6:
		return &comparison.IF_ACMPNE{}
	case 0xa7:
		return &control.GOTO{}
	case 0xaa:
		return &control.TABLESWITCH{}
	case 0xab:
		return &control.LOOKUPSWITCH{}
	case 0xac:
		return &control.IRETURN{}
	case 0xad:
		return &control.LRETURN{}
	case 0xae:
		return &control.FRETURN{}
	case 0xaf:
		return &control.DRETURN{}
	case 0xb0:
		return &control.ARETURN{}
	case 0xb1:
		return &control.RETURN{}
	case 0xb2:
		return &reference.GETSTATIC{}
	case 0xb3:
		return &reference.PUTSTATIC{}
	case 0xb4:
		return &reference.GETFIELD{}
	case 0xb5:
		return &reference.PUTFIELD{}
	case 0xb6:
		return &reference.INVOKEVIRTUAL{}
	case 0xb7:
		return &reference.INVOKESPECIAL{}
	case 0xb8:
		return &reference.INVOKESTATIC{}
	case 0xb9:
		return &reference.INVOKEINTERFACE{}
	case 0xbb:
		return &reference.NEW{}
	case 0xbc:
		return &reference.NEWARRAY{}
	case 0xbd:
		return &reference.ANEWARRAY{}
	case 0xbe:
		return &reference.ARRAYLENGTH{}
	case 0xbf:
		return &reference.ATHROW{}
	case 0xc0:
		return &reference.CHECKCAST{}
	case 0xc1:
		return &reference.INSTANCEOF{}
	case 0xc4:
		return &extended.WIDE{}
	case 0xc5:
		return &reference.MULTIANEARRAY{}
	case 0xc6:
		return &extended.IFNULL{}
	case 0xc7:
		return &extended.IFNOTNULL{}
	case 0xc8:
		return &extended.GOTOW{}
	//	//case 0xca: todo breakpoint
	case 0xfe:
		return &reserved.INVOKENATIVE{} // impdep1
	//case 0xff:
	//	return &Bootstrap{} // impdep2
	default:
		panic(fmt.Errorf("invalid opcode: %v", opcode))
	}
}
